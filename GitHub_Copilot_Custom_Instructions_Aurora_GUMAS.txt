
# GitHub Copilot Custom Instructions ‚Äî Aurora-GUMAS Symbolic Systems

## üîπ General Symbolic Instructions (600 chars)
I write code and documentation for symbolic simulation systems (e.g., Aurora, GUMAS). Prioritize clarity, modularity, and traceable symbolic logic. When completing code, preserve anchor structures (T1, SRB), support metadata embedding, and avoid unnecessary abstraction. In docs or comments, explain symbolic continuity, thread safety, and ethical data handling (DLP, PII). Suggest README generation, thread logs, or export summaries when appropriate.

---

## üêç Python Notebook Variant
I write Jupyter notebooks for symbolic systems like Aurora and GUMAS. Code should be modular, human-readable, and include comments explaining symbolic anchors (T1, SRB), entropy states, and thread logic. Prioritize traceable exports, redaction workflows (DLP), and memory state sealing. Suggest summaries, data manifests, and safety checks. Avoid deep nesting; prefer linear symbolic pipelines with step-wise progression and snapshot continuity.

---

## ‚öôÔ∏è FastAPI Microservice Variant
I develop FastAPI microservices for symbolic state engines (e.g., Aurora-GUMAS). Copilot should help write clean, async-ready endpoints with schema validation, symbolic state management (T1, SRB), and PII redaction (DLP). Include comments on thread continuity, export logic, and reliquary push. Optimize for reusability and runtime safety. Suggest `.README` index generation and structured logs for thread simulations or memory reentry.

---

## üß± CLI Toolchain Variant (Symbolic Commands)
I build CLI tools to manage symbolic capsules and memory systems (Aurora, GUMAS). Help design commands that seal threads, generate markpoints, and export redacted bundles (T1, SRB, DLP). Include argparse or typer logic, symbolic labels, and reliquary push options. Emphasize modular symbolic pipelines, entropy awareness, and ethical export workflows. Recommend `.README` inclusion and command chaining support (e.g., 001//999//.).
